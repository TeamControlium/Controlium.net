// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TeamControlium.Framework.DetokenizerClass
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class Utilities_DetokenizerFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Detokenizer.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Utilities_Detokenizer", "\tIn order to process tokens\r\n\tAs a test automator\r\n\tI want to be able to convert " +
                    "tokens to real texts", ProgrammingLanguage.CSharp, new string[] {
                        "Utilities_Detokenizer"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "Utilities_Detokenizer")))
            {
                TeamControlium.Framework.DetokenizerClass.Utilities_DetokenizerFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Convert today\'s date token to the date we run this test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Utilities_Detokenizer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Utilities_Detokenizer")]
        public virtual void ConvertTodaySDateTokenToTheDateWeRunThisTest()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Convert today\'s date token to the date we run this test", ((string[])(null)));
#line 17
    this.ScenarioSetup(scenarioInfo);
#line 18
 testRunner.Given("I have a string \"{date;today;dd/MM/yyyy}\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 19
 testRunner.When("I process the token to a string", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 20
 testRunner.Then("the string is today\'s date in the format \"dd/MM/yyyy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Convert yesterday\'s date token to the day before we run this test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Utilities_Detokenizer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Utilities_Detokenizer")]
        public virtual void ConvertYesterdaySDateTokenToTheDayBeforeWeRunThisTest()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Convert yesterday\'s date token to the day before we run this test", ((string[])(null)));
#line 22
 this.ScenarioSetup(scenarioInfo);
#line 23
 testRunner.Given("I have a string \"{date;yesterday;dd/MM/yyyy}\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 24
 testRunner.When("I process the token to a string", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 25
 testRunner.Then("the string is yesterday\'s date in the format \"dd/MM/yyyy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Convert tomorrows\'s date token to the day after we run this test")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Utilities_Detokenizer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Utilities_Detokenizer")]
        public virtual void ConvertTomorrowsSDateTokenToTheDayAfterWeRunThisTest()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Convert tomorrows\'s date token to the day after we run this test", ((string[])(null)));
#line 27
 this.ScenarioSetup(scenarioInfo);
#line 28
 testRunner.Given("I have a string \"{date;tomorrow;dd/MM/yyyy}\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 29
 testRunner.When("I process the token to a string", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 30
 testRunner.Then("the string is tomorrows\'s date in the format \"dd/MM/yyyy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Date command and verb not case sensitive")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Utilities_Detokenizer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Utilities_Detokenizer")]
        public virtual void DateCommandAndVerbNotCaseSensitive()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Date command and verb not case sensitive", ((string[])(null)));
#line 32
 this.ScenarioSetup(scenarioInfo);
#line 33
 testRunner.Given("I have a string \"{Date;Today;dd/MM/yyyy}\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 34
 testRunner.When("I process the token to a string", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 35
 testRunner.Then("the string is today\'s date in the format \"dd/MM/yyyy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Get the day of the week when test is run")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Utilities_Detokenizer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Utilities_Detokenizer")]
        public virtual void GetTheDayOfTheWeekWhenTestIsRun()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get the day of the week when test is run", ((string[])(null)));
#line 41
 this.ScenarioSetup(scenarioInfo);
#line 42
 testRunner.Given("I have a string \"{date;today;dddd}\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 43
 testRunner.When("I process the token to a string", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 44
 testRunner.Then("the string is today\'s date in the format \"dddd\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Convert date for a days offset in the past")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Utilities_Detokenizer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Utilities_Detokenizer")]
        public virtual void ConvertDateForADaysOffsetInThePast()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Convert date for a days offset in the past", ((string[])(null)));
#line 49
    this.ScenarioSetup(scenarioInfo);
#line 50
 testRunner.Given("I have a string \"{date;AddDays(-10);dd/MM/yyyy}\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 51
 testRunner.When("I process the token to a string", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 52
 testRunner.Then("the string is the date -10 \"days\" in the format \"dd/MM/yyyy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Convert date for a days offset in the future")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Utilities_Detokenizer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Utilities_Detokenizer")]
        public virtual void ConvertDateForADaysOffsetInTheFuture()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Convert date for a days offset in the future", ((string[])(null)));
#line 54
 this.ScenarioSetup(scenarioInfo);
#line 55
 testRunner.Given("I have a string \"{date;AddDays(10);dd/MM/yyyy}\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 56
 testRunner.When("I process the token to a string", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 57
 testRunner.Then("the string is the date 10 \"days\" in the format \"dd/MM/yyyy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Convert date for a days offset in the future (with a plus sign)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Utilities_Detokenizer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Utilities_Detokenizer")]
        public virtual void ConvertDateForADaysOffsetInTheFutureWithAPlusSign()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Convert date for a days offset in the future (with a plus sign)", ((string[])(null)));
#line 59
    this.ScenarioSetup(scenarioInfo);
#line 60
 testRunner.Given("I have a string \"{date;AddDays(+10);dd/MM/yyyy}\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 61
 testRunner.When("I process the token to a string", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 62
 testRunner.Then("the string is the date 10 \"days\" in the format \"dd/MM/yyyy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Convert date for a months offset in the past")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Utilities_Detokenizer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Utilities_Detokenizer")]
        public virtual void ConvertDateForAMonthsOffsetInThePast()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Convert date for a months offset in the past", ((string[])(null)));
#line 64
    this.ScenarioSetup(scenarioInfo);
#line 65
 testRunner.Given("I have a string \"{date;AddMonths(-19);dd/MM/yyyy}\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 66
 testRunner.When("I process the token to a string", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 67
 testRunner.Then("the string is the date -19 \"months\" in the format \"dd/MM/yyyy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Convert date for a months offset in the future")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Utilities_Detokenizer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Utilities_Detokenizer")]
        public virtual void ConvertDateForAMonthsOffsetInTheFuture()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Convert date for a months offset in the future", ((string[])(null)));
#line 69
 this.ScenarioSetup(scenarioInfo);
#line 70
 testRunner.Given("I have a string \"{date;AddMonths(17);dd/MM/yyyy}\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 71
 testRunner.When("I process the token to a string", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 72
 testRunner.Then("the string is the date 17 \"months\" in the format \"dd/MM/yyyy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Convert date for a years offset in the past")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Utilities_Detokenizer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Utilities_Detokenizer")]
        public virtual void ConvertDateForAYearsOffsetInThePast()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Convert date for a years offset in the past", ((string[])(null)));
#line 74
 this.ScenarioSetup(scenarioInfo);
#line 75
 testRunner.Given("I have a string \"{date;AddYears(-25);dd/MM/yyyy}\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 76
 testRunner.When("I process the token to a string", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 77
 testRunner.Then("the string is the date -25 \"years\" in the format \"dd/MM/yyyy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Convert date for a years offset in the future")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Utilities_Detokenizer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Utilities_Detokenizer")]
        public virtual void ConvertDateForAYearsOffsetInTheFuture()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Convert date for a years offset in the future", ((string[])(null)));
#line 79
 this.ScenarioSetup(scenarioInfo);
#line 80
 testRunner.Given("I have a string \"{date;AddYears(25);dd/MM/yyyy}\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 81
 testRunner.When("I process the token to a string", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 82
 testRunner.Then("the string is the date 25 \"years\" in the format \"dd/MM/yyyy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can get a random date from a single date")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Utilities_Detokenizer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Utilities_Detokenizer")]
        public virtual void ICanGetARandomDateFromASingleDate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I can get a random date from a single date", ((string[])(null)));
#line 94
 this.ScenarioSetup(scenarioInfo);
#line 95
 testRunner.Given("I have a string \"{random;date(12-07-2001,12-07-2001);dd/MM/yyyy}\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 96
 testRunner.When("I process the token to a string", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 97
 testRunner.Then("the string is a date between \"12/07/2001\" and \"12/07/2001\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can get a random date from one of two consequtive dates")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Utilities_Detokenizer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Utilities_Detokenizer")]
        public virtual void ICanGetARandomDateFromOneOfTwoConsequtiveDates()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I can get a random date from one of two consequtive dates", ((string[])(null)));
#line 99
 this.ScenarioSetup(scenarioInfo);
#line 100
 testRunner.Given("I have a string \"{random;date(11-07-2001,12-07-2001);dd/MM/yyyy}\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 101
 testRunner.When("I process the token to a string", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 102
 testRunner.Then("the string is a date between \"11/07/2001\" and \"12/07/2001\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I get correct error if min date after max date")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Utilities_Detokenizer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Utilities_Detokenizer")]
        public virtual void IGetCorrectErrorIfMinDateAfterMaxDate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I get correct error if min date after max date", ((string[])(null)));
#line 104
 this.ScenarioSetup(scenarioInfo);
#line 105
 testRunner.Given("I have a string \"{random;date(12-07-2001,11-07-2001);dd/MM/yyyy}\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 106
 testRunner.When("I process the token to a string", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 107
 testRunner.Then("the string is \"Error processing token {random;date(12-07-2001,11-07-2001);dd/MM/y" +
                    "yyy} (Maximum date earlier than Maximum date! Expect {random;date(dd-MM-yyyy,dd-" +
                    "MM-yyyy);<format>} Mindate = 12/07/2001, Maxdate = 11/07/2001)\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can get a random positive floating point number with no decimal places")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Utilities_Detokenizer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Utilities_Detokenizer")]
        public virtual void ICanGetARandomPositiveFloatingPointNumberWithNoDecimalPlaces()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I can get a random positive floating point number with no decimal places", ((string[])(null)));
#line 112
 this.ScenarioSetup(scenarioInfo);
#line 113
 testRunner.Given("I have a string \"{random;float(0,1);0}\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 114
 testRunner.When("I process the token to a string", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 115
 testRunner.Then("the string matches regular expression \"^[0-9]{1}$\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 116
 testRunner.And("the string is a number between 0 and 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can get a random positive floating point number with 1 decimal places")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Utilities_Detokenizer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Utilities_Detokenizer")]
        public virtual void ICanGetARandomPositiveFloatingPointNumberWith1DecimalPlaces()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I can get a random positive floating point number with 1 decimal places", ((string[])(null)));
#line 118
 this.ScenarioSetup(scenarioInfo);
#line 119
 testRunner.Given("I have a string \"{random;float(0,1);0.0}\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 120
 testRunner.When("I process the token to a string", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 121
 testRunner.Then("the string matches regular expression \"^[0-1]{1}\\.[0-9]{1}$\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 122
 testRunner.And("the string is a number between 0 and 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can get a random negative floating point number with 1 decimal places")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Utilities_Detokenizer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Utilities_Detokenizer")]
        public virtual void ICanGetARandomNegativeFloatingPointNumberWith1DecimalPlaces()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I can get a random negative floating point number with 1 decimal places", ((string[])(null)));
#line 124
 this.ScenarioSetup(scenarioInfo);
#line 125
 testRunner.Given("I have a string \"{random;float(-1,0);0.0}\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 126
 testRunner.When("I process the token to a string", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 127
 testRunner.Then("the string matches regular expression \"^-[0-9]{1}\\.[0-9]{1}$\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 128
 testRunner.And("the string is a number between -1 and 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can get a random positive floating point number between tiny numbers")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Utilities_Detokenizer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Utilities_Detokenizer")]
        public virtual void ICanGetARandomPositiveFloatingPointNumberBetweenTinyNumbers()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I can get a random positive floating point number between tiny numbers", ((string[])(null)));
#line 130
 this.ScenarioSetup(scenarioInfo);
#line 131
 testRunner.Given("I have a string \"{random;float(0.0003,0.0004);0.000000}\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 132
 testRunner.When("I process the token to a string", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 133
 testRunner.Then("the string matches regular expression \"^0{1}\\.0{3}[0-9]{3}$\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 134
 testRunner.And("the string is a number between 0.0003 and 0.0004", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can get a random positive floating point number with leading zeros")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Utilities_Detokenizer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Utilities_Detokenizer")]
        public virtual void ICanGetARandomPositiveFloatingPointNumberWithLeadingZeros()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I can get a random positive floating point number with leading zeros", ((string[])(null)));
#line 136
 this.ScenarioSetup(scenarioInfo);
#line 137
 testRunner.Given("I have a string \"{random;float(3,4);000}\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 138
 testRunner.When("I process the token to a string", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 139
 testRunner.Then("the string matches regular expression \"^0{2}[3-4]{1}$\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 140
 testRunner.And("the string is a number between 3 and 4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can get a single random character from a given set")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Utilities_Detokenizer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Utilities_Detokenizer")]
        public virtual void ICanGetASingleRandomCharacterFromAGivenSet()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I can get a single random character from a given set", ((string[])(null)));
#line 145
 this.ScenarioSetup(scenarioInfo);
#line 146
 testRunner.Given("I have a string \"{random;from(abc);1}\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 147
 testRunner.When("I process the token to a string", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 148
 testRunner.Then("the string matches regular expression \"^[a-c]{1}$\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 149
 testRunner.And("the string is 1 characters from \"abc\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
