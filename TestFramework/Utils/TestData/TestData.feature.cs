// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TeamControlium.TestFramework.Utils.TestData
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class Utilities_TestDataFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "TestData.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Utilities_TestData", "\tIn order to test Test Data repository\r\n\tAs a test automator\r\n\tI want to be able " +
                    "to save and recall test data", ProgrammingLanguage.CSharp, new string[] {
                        "Utilities_TestData"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "Utilities_TestData")))
            {
                global::TeamControlium.TestFramework.Utils.TestData.Utilities_TestDataFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Save and recall a string to test data")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Utilities_TestData")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Utilities_TestData")]
        public virtual void SaveAndRecallAStringToTestData()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Save and recall a string to test data", ((string[])(null)));
#line 7
    this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("I have saved Test Data item 1 \"My Data\" in item named \"MyName\" in category \"MyCat" +
                    "egory\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.When("I recall the Test Data item 1 named \"MyName\" in category \"MyCategory\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 10
 testRunner.Then("the recalled 1 value matches the saved 1 value", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Save and recall two strings from same Category")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Utilities_TestData")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Utilities_TestData")]
        public virtual void SaveAndRecallTwoStringsFromSameCategory()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Save and recall two strings from same Category", ((string[])(null)));
#line 12
    this.ScenarioSetup(scenarioInfo);
#line 13
 testRunner.Given("I have saved Test Data item 1 \"My Data one\" in item named \"MyName1\" in category \"" +
                    "MyCategory\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 14
 testRunner.And("I have saved Test Data item 2 \"My Data two\" in item named \"MyName2\" in category \"" +
                    "MyCategory\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 15
 testRunner.When("I recall the Test Data item 1 named \"MyName1\" in category \"MyCategory\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 16
 testRunner.And("I recall the Test Data item 2 named \"MyName2\" in category \"MyCategory\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 17
 testRunner.Then("the recalled 1 value matches the saved 1 value", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 18
 testRunner.And("the recalled 2 value matches the saved 2 value", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Save two strings to a category then recall")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Utilities_TestData")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Utilities_TestData")]
        public virtual void SaveTwoStringsToACategoryThenRecall()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Save two strings to a category then recall", ((string[])(null)));
#line 20
 this.ScenarioSetup(scenarioInfo);
#line 21
 testRunner.Given("I have a Test data item \"My Data one\" in item named \"MyName1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 22
 testRunner.And("I have a Test data item \"My Data two\" in item named \"MyName2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 23
 testRunner.And("I have saved items in category \"MyCategory\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 24
 testRunner.When("I recall the Test Data item 1 named \"MyName1\" in category \"MyCategory\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 25
 testRunner.And("I recall the Test Data item 2 named \"MyName2\" in category \"MyCategory\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 26
 testRunner.Then("the recalled 1 value matches the saved 1 value", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 27
 testRunner.And("the recalled 2 value matches the saved 2 value", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Save and recall two strings from different Categories")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Utilities_TestData")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Utilities_TestData")]
        public virtual void SaveAndRecallTwoStringsFromDifferentCategories()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Save and recall two strings from different Categories", ((string[])(null)));
#line 29
    this.ScenarioSetup(scenarioInfo);
#line 30
 testRunner.Given("I have saved Test Data item 1 \"My Data one\" in item named \"MyName\" in category \"M" +
                    "yCategory1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 31
 testRunner.And("I have saved Test Data item 2 \"My Data two\" in item named \"MyName\" in category \"M" +
                    "yCategory2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 32
 testRunner.When("I recall the Test Data item 1 named \"MyName\" in category \"MyCategory1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 33
 testRunner.And("I recall the Test Data item 2 named \"MyName\" in category \"MyCategory2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 34
 testRunner.Then("the recalled 1 value matches the saved 1 value", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 35
 testRunner.And("the recalled 2 value matches the saved 2 value", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Save and recall an integer to test data")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Utilities_TestData")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Utilities_TestData")]
        public virtual void SaveAndRecallAnIntegerToTestData()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Save and recall an integer to test data", ((string[])(null)));
#line 37
 this.ScenarioSetup(scenarioInfo);
#line 38
 testRunner.Given("I have saved Test Data item 1 69 in item named \"MyName\" in category \"MyCategory\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 39
 testRunner.When("I recall the Test Data item 1 named \"MyName\" in category \"MyCategory\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 40
 testRunner.Then("the recalled 1 value matches the saved 1 value", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Save and recall one string and one int from same Category")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Utilities_TestData")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Utilities_TestData")]
        public virtual void SaveAndRecallOneStringAndOneIntFromSameCategory()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Save and recall one string and one int from same Category", ((string[])(null)));
#line 42
    this.ScenarioSetup(scenarioInfo);
#line 43
 testRunner.Given("I have saved Test Data item 1 \"My Data one\" in item named \"MyName1\" in category \"" +
                    "MyCategory\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 44
 testRunner.And("I have saved Test Data item 2 222 in item named \"MyName2\" in category \"MyCategory" +
                    "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 45
 testRunner.When("I recall the Test Data item 1 named \"MyName1\" in category \"MyCategory\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 46
 testRunner.And("I recall the Test Data item 2 named \"MyName2\" in category \"MyCategory\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 47
 testRunner.Then("the recalled 1 value matches the saved 1 value", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 48
 testRunner.And("the recalled 2 value matches the saved 2 value", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Change a string value in test data")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Utilities_TestData")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Utilities_TestData")]
        public virtual void ChangeAStringValueInTestData()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Change a string value in test data", ((string[])(null)));
#line 50
    this.ScenarioSetup(scenarioInfo);
#line 51
 testRunner.Given("I have saved Test Data item 1 \"My Data\" in item named \"MyName\" in category \"MyCat" +
                    "egory\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 52
 testRunner.When("I change Test Data item 1 named \"MyName\" in category \"MyCategory\" to \"New Value\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 53
 testRunner.And("I recall the Test Data item 1 named \"MyName\" in category \"MyCategory\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 54
 testRunner.Then("the recalled 1 value matches the saved 1 value", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Change an integer value to a string value in test data")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Utilities_TestData")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Utilities_TestData")]
        public virtual void ChangeAnIntegerValueToAStringValueInTestData()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Change an integer value to a string value in test data", ((string[])(null)));
#line 56
    this.ScenarioSetup(scenarioInfo);
#line 57
 testRunner.Given("I have saved Test Data item 1 69 in item named \"MyName\" in category \"MyCategory\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 58
 testRunner.When("I change Test Data item 1 named \"MyName\" in category \"MyCategory\" to \"New Value\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 59
 testRunner.And("I recall the Test Data item 1 named \"MyName\" in category \"MyCategory\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 60
 testRunner.Then("the recalled 1 value matches the saved 1 value", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Correct error if I try to get a string as an integer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Utilities_TestData")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Utilities_TestData")]
        public virtual void CorrectErrorIfITryToGetAStringAsAnInteger()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Correct error if I try to get a string as an integer", ((string[])(null)));
#line 62
    this.ScenarioSetup(scenarioInfo);
#line 63
 testRunner.Given("I have saved Test Data item 1 \"My Data\" in item named \"MyName\" in category \"MyCat" +
                    "egory\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 64
 testRunner.When("I recall the Test Data item 1 named \"MyName\" in category \"MyCategory\" as an integ" +
                    "er", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 65
    testRunner.Then("the recalled 1 value is an exception with innermost exception message \"Expected t" +
                    "ype [Int32] but got type [System.String].\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Save one item of test data then clear")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Utilities_TestData")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Utilities_TestData")]
        public virtual void SaveOneItemOfTestDataThenClear()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Save one item of test data then clear", ((string[])(null)));
#line 67
    this.ScenarioSetup(scenarioInfo);
#line 68
 testRunner.Given("I have saved Test Data item 1 \"My Data\" in item named \"MyName\" in category \"MyCat" +
                    "egory\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 69
 testRunner.When("I clear the test data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 70
 testRunner.And("I recall the Test Data item 1 named \"MyName\" in category \"MyCategory\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 71
    testRunner.Then("the recalled 1 value is an exception with innermost exception message \"Category d" +
                    "oes not exist Parameter name: category Actual value was MyCategory.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Save two items of test data in different categories then clear")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Utilities_TestData")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Utilities_TestData")]
        public virtual void SaveTwoItemsOfTestDataInDifferentCategoriesThenClear()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Save two items of test data in different categories then clear", ((string[])(null)));
#line 73
 this.ScenarioSetup(scenarioInfo);
#line 74
 testRunner.Given("I have saved Test Data item 1 \"My Data\" in item named \"MyName\" in category \"MyCat" +
                    "egory1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 75
 testRunner.Given("I have saved Test Data item 2 66 in item named \"MyName\" in category \"MyCategory2\"" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 76
 testRunner.When("I clear the test data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 77
 testRunner.And("I recall the Test Data item 1 named \"MyName\" in category \"MyCategory1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 78
    testRunner.Then("the recalled 1 value is an exception with innermost exception message \"Category d" +
                    "oes not exist Parameter name: category Actual value was MyCategory1.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 79
 testRunner.When("I recall the Test Data item 2 named \"MyName\" in category \"MyCategory2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 80
    testRunner.Then("the recalled 2 value is an exception with innermost exception message \"Category d" +
                    "oes not exist Parameter name: category Actual value was MyCategory2.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
